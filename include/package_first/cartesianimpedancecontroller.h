#ifndef CARTESIANIMPEDANCECONTROLLER_H
#define CARTESIANIMPEDANCECONTROLLER_H

// -------------------------- INCLUDE -------------------------- //

#include <iostream>
#include <thread>
#include <math.h>
#include <chrono>

#include <cartesian_interface/utils/RobotStatePublisher.h> // ROS related
#include <cartesian_interface/CartesianInterfaceImpl.h> // For the solver
#include <RobotInterfaceROS/ConfigFromParam.h>  // Model param config
#include <XBotInterface/ModelInterface.h>   // Model generation
#include <XBotInterface/RobotInterface.h>   // Robot generation
#include <xbot2/xbot2.h>
#include <xbot2/hal/dev_ft.h>
#include <Eigen/Core>
#include <Eigen/Geometry>
#include <eigen_conversions/eigen_msg.h>
#include <awesome_utils/awesome_utils/sign_proc_utils.hpp>

using namespace std;
using namespace XBot;

// -------------------------- CLASS -------------------------- //

/**
 * @brief The CartesianImpedanceController class
 */
class CartesianImpedanceController : public ControlPlugin
{

public:

    using ControlPlugin::ControlPlugin;


//    CartesianImpedanceController();

//    /**
//     * @brief CartesianImpedanceController constructor
//     */
//    CartesianImpedanceController(ros::NodeHandle nh, double dt, const string root_link, const string end_effector_link);

//    /**
//     * @brief CartesianImpedanceController destructor
//     */
//    ~CartesianImpedanceController();


    // ==============================================================================
    // Real-time functions
    // ==============================================================================

    /*
     * TODO: To be implemented
     *
     * virtual bool on_initialize() = 0;
     * virtual void on_start();
     * virtual void run() = 0;
     * virtual void on_stop();
    */

    bool on_initialize() override;
    void on_start() override;
    void run() override;
    void on_stop() override;

    // ==============================================================================
    // Additional Functions
    // ==============================================================================

    /**
     * @brief update_inertia is a function that update the operational space inertia matrix and compute the matrix Q
     * from its Cholesky factor
     */
    void update_inertia();

    /**
     * @brief update_K_omega is a function that computes the new value of the natural frequency due to the change
     * in the operational space inertia matrix
     */
    void update_K_omega();

    /**
     * @brief update_D compute the new value of the damping matrix after computing Q and the natural frequency matrix _K_omega
     */
    void update_D();

    void update_real_value();

    /**
     * @brief compute_error compute the error between the reference and real values.
     * It must be done after getting the updated values of the acceleration, velocity, position of the
     * end-effector.
     */
    void compute_error();

    /**
     * @brief compute_force is the function that given all the error of acc, vel and pos compute the virtual force of
     * the damper and spring system, using the previously updated operational space inertia, stiffness and damping matrix.
     * This function is intended to be called every iteration of a cycle, in order to obtain at each instant of time _dt
     * a new value of the virtal force generated by the displacement from the reference value of the spring/damper system
     * @return return the wrench containig the force and moment
     */
    Eigen::Vector6d compute_force();

    // ==============================================================================
    // Setter and Getter
    // ==============================================================================

    /**
     * @brief set_stiffness_damping
     * @param newK_diag
     * @param newD_diag
     */
    void set_stiffness_damping(const Eigen::Matrix6d &newK_diag, const Eigen::Matrix6d &newD_diag);

    /**
     * @brief get_stiffness
     * @return the most updated value of the stiffness matrix
     */
    Eigen::Matrix6d get_stiffness() const;

    /**
     * @brief get_damping
     * @return the most updated value of the damping matrix
     */
    Eigen::Matrix6d get_damping() const;

    /**
     * @brief set_reference_value is used to set the position and
     * @param acc_ref is the reference acceleration value of the end effector
     * @param vel_ref is the reference velocity value of the end effector
     * @param pos_ref is the reference position value of the end effector
     */
    void set_reference_value(Eigen::Vector6d acc_ref, Eigen::Vector6d vel_ref, Eigen::Vector6d pos_ref);

private:

    // Variables

    double _dt; // sampling time
    double _n_joints; // number of joints

    const string _root_link;
    const string _end_effector_link;

    ros::NodeHandle _nh;
    //std::shared_ptr<XBot::Cartesian::Utils::RobotStatePublisher> _rspub;

    XBot::ModelInterface::Ptr _model;

    Eigen::Matrix6d _K_omega, _D_zeta;   // diagonal matrix that represent the elementary stiffness and damping of the Cartesian axis
    Eigen::Matrix6d _K, _D; // computed Stiffness and damping matrix
    Eigen::Matrix6d _op_sp_inertia; // operational space inertial matrix, usually referred to as Î›

    // Reference acceleration, velocity, position of the end-effector w.r.t. to the base link. By default equal to zero
    Eigen::Vector6d _xddot_ref, _xdot_ref, _x_ref;

    // Actual acceleration, velocity, position of the end-effector w.r.t. to the base link
    Eigen::Vector6d _xddot_real, _xdot_real, _x_real;
    Eigen::Vector6d _xdot_prec; // used for the computation of the acceleration that is done by dv/dt

    // Error between the actual and reference values
    Eigen::Vector6d _eddot, _edot, _e;

    Eigen::MatrixXd _J; // Jacobian matrix between the root link and the end effector
    Eigen::MatrixXd _B_inv; // Inertia matrix in joint space
    Eigen::Matrix6d _Q; // Used in the Cholesky decomposition of the operational space inertia

    SignProcUtils::MovAvrgFilt _velocity_filter;   // Moving average filter of the velocity, used to compute the acceleration through numerical derivative

    // Functions

    /**
     * @brief cholesky_decomp compute the Cholesky decomposition of the operational space inertia
     * in order to obtain the matrix Q used in the computation of stiffness (K) and damping (D)
     */
    void cholesky_decomp(Eigen::Matrix6d matrix);

    /**
     * @brief matrix_sqrt compute the square root of each elements of the matrix
     * @param matrix
     * @return the square root of the input matrix
     */
    Eigen::Matrix6d matrix_sqrt(Eigen::Matrix6d matrix);

};

#endif // CARTESIANIMPEDANCECONTROLLER_H
